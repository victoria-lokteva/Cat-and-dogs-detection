Анализ кода проекта Cats and dogs detection с помощью инструментов PyLint, Radon, Black

 PyLint.

PyLint находит сразу и логические, и стилистические  ошибки в коде, оценивая его общее качество по десятибальной шкале. Он очень прост в использовании и запускается буквально одной строчкой, поэтому был выбран мной для анализа кода.

Примеры ошибок в скриптах:

1. dataset.py 
Оценка кода - 4.55/10

- Некоторые строки с комментариями имеют слишком большую длину
- Нет оформленного в виде строки (docstring) комментария, что делает тот или иной метод
- Некоторые переменные не имеют нижних подчеркиваний, где это требуется, не подпадая под змеиный стиль (snake_case) именования переменных. Например, bb вместо b_b (bounding box)
- Методы  absolute_cords и relative_coords не используют self, поэтому их можно было сделать статическими



2. net.py 
Оценка кода - 6.67/10

- При наследовании от абстрактного класса Module не переопределены все абстрактные методы


3. train_functions.py 
Оценка кода - 4.17/10

- Бесполезные псевдонимы для импортов (import alias), то есть те, которые не переименовывают импортируемый модуль. Например, from tqdm.notebook import tqdm as tqdm
- Переменная итерирования используется после отработки цикла, но при этом не проинициализирована перед циклом (undefined loop variable)
- Заведена переменная, которая нигде более не используется
- Слишком много локальных переменных в объявлении функции  validation (19 вместо 15 рекоммендованных)
- Функция принимает на вход слишком много аргументов 
- Ненужный super().__init__()

 4. main.py 

- Неправильный порядок импортов
- Названия переменных не соответствуют UPPER_CASE naming style



Radon

Radon считает различные метрики для кода, такие как цикломатическая сложность кода, maintainability index (насколько легко будет поддерживать код), halsted complexity (метрика, которая показывает количество операторов и операндов, на основе их количества считает сложность кода). По таким метрикам можно получить представление, насколько читабелен, доступен для восприятия другими людьми и поддерживаем код.


Настройка.
Команда  radon cc -s <path> показывает сложность различных участков кода.  
Команда radon cc -s <path> рассчитывает maintainability index.

Результаты.

- Цикломатическая сложность
 Ранг цикломатической сложности для всех скриптов - А, то есть минимальная сложность. Максимальную сложность имела реализация класса Dataset, особенно конструктор и метод getitem (score = 3 - 5). Наиболее простыми оказались методы для пересчета координат absolute_cords и relative_coords , а также класс для вычисления метрики IOU (score=1).

- Maintainability index 
Для всех скриптов mi = A, то есть такой код легко поддерживать

- halsted complexity
Наибольшую сложность имеет скрипт train_fuctions.py (hc = 5), наименьшую - net.py (hc = 0.5)



Black

С помощью Black можно привести код в вид, соответствующий PeP-8, что и было сделано локально. Хотя код был отформатрирован автоформатором в Pycharm(Ctrl+Alt+L), тем не менее Black обнаружил кое-какие несоответствия.

Запуск из командной строки:  black /home/.../Cat-and-dogs-detection

Вснесенные исправления:

- Одинарные ковычки заменены на двойные как при обращении к ключу в словаре, прописывании путей, так и в комментариях
- Добавлена запятая  после последнего элемента в torch.nn.Sequential
- В print каждый новый аргумент стал расположен на новой строке





















